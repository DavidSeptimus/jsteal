export enum Mode {
  Signature = 1 << 0,
  Application = 1 << 1,
}

export class Op {
  public constructor(
    public value: string,
    /**
     *         the modes where this op is available.
     */
    public mode: number,
    public minVersion: number
  ) {}

  public toString(): string {
    return this.value;
  }
}

export const Ops = {
  err: new Op("err", Mode.Signature | Mode.Application, 2),
  sha256: new Op("sha256", Mode.Signature | Mode.Application, 2),
  keccak256: new Op("keccak256", Mode.Signature | Mode.Application, 2),
  sha512_256: new Op("sha512_256", Mode.Signature | Mode.Application, 2),
  ed25519Verify: new Op("ed25519verify", Mode.Signature, 2),
  add: new Op("+", Mode.Signature | Mode.Application, 2),
  minus: new Op("-", Mode.Signature | Mode.Application, 2),
  div: new Op("/", Mode.Signature | Mode.Application, 2),
  mul: new Op("*", Mode.Signature | Mode.Application, 2),
  lt: new Op("<", Mode.Signature | Mode.Application, 2),
  gt: new Op(">", Mode.Signature | Mode.Application, 2),
  le: new Op("<=", Mode.Signature | Mode.Application, 2),
  ge: new Op(">=", Mode.Signature | Mode.Application, 2),
  logic_and: new Op("&&", Mode.Signature | Mode.Application, 2),
  logic_or: new Op("||", Mode.Signature | Mode.Application, 2),
  eq: new Op("==", Mode.Signature | Mode.Application, 2),
  neq: new Op("!=", Mode.Signature | Mode.Application, 2),
  logic_not: new Op("!", Mode.Signature | Mode.Application, 2),
  len: new Op("len", Mode.Signature | Mode.Application, 2),
  itob: new Op("itob", Mode.Signature | Mode.Application, 2),
  btoi: new Op("btoi", Mode.Signature | Mode.Application, 2),
  mod: new Op("%", Mode.Signature | Mode.Application, 2),
  bitwise_or: new Op("|", Mode.Signature | Mode.Application, 2),
  bitwise_and: new Op("&", Mode.Signature | Mode.Application, 2),
  bitwise_xor: new Op("^", Mode.Signature | Mode.Application, 2),
  bitwise_not: new Op("~", Mode.Signature | Mode.Application, 2),
  mulw: new Op("mulw", Mode.Signature | Mode.Application, 2),
  addw: new Op("addw", Mode.Signature | Mode.Application, 2),
  intcblock: new Op("intcblock", Mode.Signature | Mode.Application, 2),
  intc: new Op("intc", Mode.Signature | Mode.Application, 2),
  intc_0: new Op("intc_0", Mode.Signature | Mode.Application, 2),
  intc_1: new Op("intc_1", Mode.Signature | Mode.Application, 2),
  intc_2: new Op("intc_2", Mode.Signature | Mode.Application, 2),
  intc_3: new Op("intc_3", Mode.Signature | Mode.Application, 2),
  int: new Op("int", Mode.Signature | Mode.Application, 2),
  bytecblock: new Op("bytecblock", Mode.Signature | Mode.Application, 2),
  bytec: new Op("bytec", Mode.Signature | Mode.Application, 2),
  bytec_0: new Op("bytec_0", Mode.Signature | Mode.Application, 2),
  bytec_1: new Op("bytec_1", Mode.Signature | Mode.Application, 2),
  bytec_2: new Op("bytec_2", Mode.Signature | Mode.Application, 2),
  bytec_3: new Op("bytec_3", Mode.Signature | Mode.Application, 2),
  byte: new Op("byte", Mode.Signature | Mode.Application, 2),
  addr: new Op("addr", Mode.Signature | Mode.Application, 2),
  arg: new Op("arg", Mode.Signature, 2),
  txn: new Op("txn", Mode.Signature | Mode.Application, 2),
  global_: new Op("global", Mode.Signature | Mode.Application, 2),
  gtxn: new Op("gtxn", Mode.Signature | Mode.Application, 2),
  load: new Op("load", Mode.Signature | Mode.Application, 2),
  store: new Op("store", Mode.Signature | Mode.Application, 2),
  txna: new Op("txna", Mode.Signature | Mode.Application, 2),
  gtxna: new Op("gtxna", Mode.Signature | Mode.Application, 2),
  bnz: new Op("bnz", Mode.Signature | Mode.Application, 2),
  bz: new Op("bz", Mode.Signature | Mode.Application, 2),
  b: new Op("b", Mode.Signature | Mode.Application, 2),
  return_: new Op("return", Mode.Signature | Mode.Application, 2),
  pop: new Op("pop", Mode.Signature | Mode.Application, 2),
  dup: new Op("dup", Mode.Signature | Mode.Application, 2),
  dup2: new Op("dup2", Mode.Signature | Mode.Application, 2),
  concat: new Op("concat", Mode.Signature | Mode.Application, 2),
  substring: new Op("substring", Mode.Signature | Mode.Application, 2),
  substring3: new Op("substring3", Mode.Signature | Mode.Application, 2),
  balance: new Op("balance", Mode.Application, 2),
  app_opted_in: new Op("app_opted_in", Mode.Application, 2),
  app_local_get: new Op("app_local_get", Mode.Application, 2),
  app_local_get_ex: new Op("app_local_get_ex", Mode.Application, 2),
  app_global_get: new Op("app_global_get", Mode.Application, 2),
  app_global_get_ex: new Op("app_global_get_ex", Mode.Application, 2),
  app_local_put: new Op("app_local_put", Mode.Application, 2),
  app_global_put: new Op("app_global_put", Mode.Application, 2),
  app_local_del: new Op("app_local_del", Mode.Application, 2),
  app_global_del: new Op("app_global_del", Mode.Application, 2),
  asset_holding_get: new Op("asset_holding_get", Mode.Application, 2),
  asset_params_get: new Op("asset_params_get", Mode.Application, 2),
  gtxns: new Op("gtxns", Mode.Signature | Mode.Application, 3),
  gtxnsa: new Op("gtxnsa", Mode.Signature | Mode.Application, 3),
  assert_: new Op("assert", Mode.Signature | Mode.Application, 3),
  dig: new Op("dig", Mode.Signature | Mode.Application, 3),
  swap: new Op("swap", Mode.Signature | Mode.Application, 3),
  select: new Op("select", Mode.Signature | Mode.Application, 3),
  getbit: new Op("getbit", Mode.Signature | Mode.Application, 3),
  setbit: new Op("setbit", Mode.Signature | Mode.Application, 3),
  getbyte: new Op("getbyte", Mode.Signature | Mode.Application, 3),
  setbyte: new Op("setbyte", Mode.Signature | Mode.Application, 3),
  min_balance: new Op("min_balance", Mode.Application, 3),
  pushbytes: new Op("pushbytes", Mode.Signature | Mode.Application, 3),
  pushint: new Op("pushint", Mode.Signature | Mode.Application, 3),
};
